#!/usr/bin/env python3
"""
Demo script for AI Assistant Personalization System
‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö AI Assistant ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
"""

import asyncio
import json
from datetime import datetime
import sys
import os

# Add the project root to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.user_profile import user_profile_manager
from models.chat_memory import enhanced_chat_memory

def print_header(title):
    """Print a formatted header"""
    print("\n" + "="*60)
    print(f"üéØ {title}")
    print("="*60)

def print_section(title):
    """Print a formatted section"""
    print(f"\nüìç {title}")
    print("-" * 40)

def demo_user_profile_creation():
    """Demo: Creating and managing user profiles"""
    print_section("‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Profile Creation)")
    
    # Create a sample user
    user_id = "demo_user_001"
    
    profile = user_profile_manager.create_user_profile(
        user_id=user_id,
        name="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡πÉ‡∏à ‡∏ä‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß",
        nickname="‡∏™‡∏°‡πÉ‡∏à",
        age_range="26-35",
        language_preference="th",
        location="‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
        budget_range="mid"
    )
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {profile.personal_info.name}")
    print(f"   ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô: {profile.personal_info.nickname}")
    print(f"   ‡∏†‡∏≤‡∏©‡∏≤: {profile.personal_info.language_preference}")
    print(f"   ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {profile.travel_preferences.budget_range.value}")
    
    return user_id

def demo_travel_preferences(user_id):
    """Demo: Updating travel preferences"""
    print_section("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (Travel Preferences)")
    
    success = user_profile_manager.update_travel_preferences(
        user_id,
        favorite_places=["‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û", "‡∏´‡∏≤‡∏î‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á", "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡πÄ‡∏à‡πÄ‡∏à"],
        favorite_seasons=["cool", "hot"],
        place_types=["temple", "mountain", "beach", "market"],
        travel_style=["cultural", "relaxing", "adventure"],
        accommodation_type=["hotel", "resort"],
        transportation=["car", "walk"],
        group_preference="couple",
        activity_level="medium"
    )
    
    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success}")
    
    # Show updated preferences
    profile = user_profile_manager.get_user_profile(user_id)
    print(f"   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: {profile.travel_preferences.favorite_places}")
    print(f"   ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: {[s.value for s in profile.travel_preferences.favorite_seasons]}")
    print(f"   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {[p.value for p in profile.travel_preferences.place_types]}")
    print(f"   ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: {profile.travel_preferences.travel_style}")

def demo_conversation_memory(user_id):
    """Demo: Conversation memory and context"""
    print_section("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏î‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (Conversation Memory)")
    
    # Start a conversation
    conversation_id = enhanced_chat_memory.start_conversation(user_id, "demo_session")
    print(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {conversation_id}")
    
    # Sample conversation
    conversations = [
        {
            "user": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡πÉ‡∏à ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
            "bot": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡πÉ‡∏à! ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß ‡∏ß‡∏±‡∏î‡∏≠‡∏£‡∏∏‡∏ì ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÇ‡∏û‡∏ò‡∏¥‡πå ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø",
            "importance": 0.9
        },
        {
            "user": "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 15,000 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÑ‡∏î‡πâ‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô",
            "bot": "‡∏î‡πâ‡∏ß‡∏¢‡∏á‡∏ö 15,000 ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 4-5 ‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏±‡∏Å‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á",
            "importance": 0.8
        },
        {
            "user": "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡πâ‡∏≤‡∏á",
            "bot": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡πÄ‡∏à‡πÄ‡∏à (‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå) ‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏ñ‡πÑ‡∏ü‡∏£‡∏±‡∏ä‡∏î‡∏≤ (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô) ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏´‡πà‡∏á‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
            "importance": 0.7
        },
        {
            "user": "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å",
            "bot": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏∞",
            "importance": 0.6
        }
    ]
    
    # Add conversations to memory
    for i, conv in enumerate(conversations, 1):
        entry_id = enhanced_chat_memory.add_interaction(
            conversation_id=conversation_id,
            human_message=conv["user"],
            ai_message=conv["bot"],
            importance_score=conv["importance"]
        )
        
        # Also add to user profile
        user_profile_manager.add_memory(
            user_id=user_id,
            conversation_id=conversation_id,
            user_message=conv["user"],
            bot_response=conv["bot"],
            importance_score=conv["importance"]
        )
        
        print(f"   ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà {i}: {conv['user'][:30]}...")
    
    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ {len(conversations)} ‡∏£‡∏≠‡∏ö")
    
    return conversation_id

def demo_personalized_recommendations(user_id):
    """Demo: Personalized recommendations"""
    print_section("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (Personalized Recommendations)")
    
    test_queries = [
        {
            "query": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
            "context": {"season": "cool", "weather": "sunny"}
        },
        {
            "query": "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏≤‡∏ß",
            "context": {"season": "cool", "weather": "cool"}
        },
        {
            "query": "‡∏ä‡∏≤‡∏¢‡∏´‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å",
            "context": {"season": "hot", "weather": "sunny"}
        },
        {
            "query": "‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à",
            "context": {"season": "cool", "weather": "cloudy"}
        }
    ]
    
    for i, test in enumerate(test_queries, 1):
        print(f"\nüîç ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}: \"{test['query']}\"")
        
        recommendations = user_profile_manager.get_personalized_recommendations(
            user_id=user_id,
            query=test["query"],
            context=test["context"]
        )
        
        print(f"üìä ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ {len(recommendations)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        
        for j, rec in enumerate(recommendations[:3], 1):  # Show top 3
            print(f"   {j}. {rec['place_name']} ({rec['place_name_en']})")
            print(f"      ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {rec['score']:.2f} | ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {rec['type']}")
            print(f"      ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {', '.join(rec['reasons'][:2])}")
            print(f"      ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: {rec['personalization_level']}")
            print()

def demo_memory_search(user_id):
    """Demo: Memory search and context"""
    print_section("‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (Memory Search)")
    
    search_queries = ["‡∏ß‡∏±‡∏î", "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ï‡∏•‡∏≤‡∏î", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"]
    
    for query in search_queries:
        print(f"\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: \"{query}\"")
        
        memory_context = enhanced_chat_memory.get_user_memory_context(
            user_id, query, limit=2
        )
        
        relevant_memories = memory_context['relevant_memories']
        print(f"üìù ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á {len(relevant_memories)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        
        for mem in relevant_memories:
            print(f"   üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {mem['human_message'][:50]}...")
            print(f"   ü§ñ AI: {mem['ai_message'][:50]}...")
            print(f"   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {mem['importance_score']:.2f}")
        
        if memory_context['mentioned_places']:
            print(f"   üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á: {', '.join(memory_context['mentioned_places'][:3])}")

def demo_user_summary(user_id):
    """Demo: User summary and analytics"""
    print_section("‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Summary)")
    
    summary = user_profile_manager.get_user_summary(user_id)
    
    print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠: {summary['name']} ({summary['nickname']})")
    print(f"üó£Ô∏è ‡∏†‡∏≤‡∏©‡∏≤: {summary['language']}")
    print(f"üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {summary['location']}")
    print(f"üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {summary['budget_range']}")
    print(f"üéØ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: {', '.join(summary['travel_style'])}")
    print(f"üë• ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö: {summary['group_preference']}")
    
    print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print(f"   üí¨ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {summary['total_conversations']}")
    print(f"   üß† ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: {summary['total_memories']}")
    print(f"   üëç ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {summary['acceptance_rate']:.1%}")
    print(f"   üòä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à: {summary['satisfaction_rate']:.2f}")
    print(f"   üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: {summary['personalization_score']:.2f}")
    
    print(f"\n‚ù§Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö:")
    for place in summary['favorite_places']:
        print(f"   ‚Ä¢ {place}")
    
    print(f"\nüå§Ô∏è ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö:")
    for season in summary['favorite_seasons']:
        print(f"   ‚Ä¢ {season}")

def demo_feedback_learning(user_id):
    """Demo: Feedback and learning system"""
    print_section("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å Feedback")
    
    # Record some feedback
    feedbacks = [
        {"recommendation": "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "feedback": "like", "score": 0.9},
        {"recommendation": "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡πÄ‡∏à‡πÄ‡∏à", "feedback": "like", "score": 0.8},
        {"recommendation": "‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û", "feedback": "love", "score": 1.0},
    ]
    
    print("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å feedback:")
    for fb in feedbacks:
        user_profile_manager.record_feedback(
            user_id=user_id,
            recommendation=fb["recommendation"],
            feedback=fb["feedback"],
            satisfaction_score=fb["score"]
        )
        print(f"   üëç {fb['recommendation']}: {fb['feedback']} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {fb['score']})")
    
    # Show updated summary
    updated_summary = user_profile_manager.get_user_summary(user_id)
    print(f"\nüéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á feedback: {updated_summary['personalization_score']:.2f}")
    print(f"üòä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {updated_summary['satisfaction_rate']:.2f}")

def demo_api_integration():
    """Demo: API integration examples"""
    print_section("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API")
    
    print("üåê API Endpoints ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:")
    
    endpoints = [
        "POST /personalization/users/{user_id}/profile - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
        "GET  /personalization/users/{user_id}/profile - ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
        "PUT  /personalization/users/{user_id}/profile/travel - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö",
        "POST /personalization/users/{user_id}/conversations/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
        "POST /personalization/users/{user_id}/memory - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥",
        "POST /personalization/users/{user_id}/recommendations - ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
        "POST /personalization/users/{user_id}/feedback - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å feedback",
        "GET  /personalization/users/{user_id}/summary - ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        "POST /ai/personalized/chat - ‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
        "GET  /personalization/config/options - ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
    ]
    
    for endpoint in endpoints:
        print(f"   ‚Ä¢ {endpoint}")
    
    print(f"\nüìö ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API ‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://localhost:8000/docs")
    print(f"üìñ ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: PERSONALIZATION.md")

def main():
    """Main demo function"""
    print_header("üéâ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö AI Assistant ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    print("AI Assistant Personalization System Demo")
    print(f"‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # Run all demo functions
        user_id = demo_user_profile_creation()
        demo_travel_preferences(user_id)
        conversation_id = demo_conversation_memory(user_id)
        demo_personalized_recommendations(user_id)
        demo_memory_search(user_id)
        demo_user_summary(user_id)
        demo_feedback_learning(user_id)
        demo_api_integration()
        
        print_header("üéä ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - Demo Complete")
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö AI Assistant ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("‚úÖ Personalization System is ready for production!")
        
        print(f"\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print(f"   ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ‚úÖ")
        print(f"   ‚Ä¢ ‡∏à‡∏î‡∏à‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö: ‚úÖ")
        print(f"   ‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: ‚úÖ")
        print(f"   ‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: ‚úÖ")
        print(f"   ‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ‚úÖ")
        print(f"   ‚Ä¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å feedback: ‚úÖ")
        print(f"   ‚Ä¢ API Integration: ‚úÖ")
        
        print(f"\nüöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print(f"   1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: python main.py")
        print(f"   2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå: http://localhost:8000")
        print(f"   3. ‡∏î‡∏π API docs: http://localhost:8000/docs")
        print(f"   4. ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: PERSONALIZATION.md")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()